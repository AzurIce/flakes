# Do not modify this file!  It was generated by ‘nixos-generate-config’
# and may be overwritten by future invocations.  Please make changes
# to /etc/nixos/configuration.nix instead.
{ config, lib, pkgs, modulesPath, ... }:

let
  uuid = "22edbf0b-9105-4fb5-a378-905825f76f72";
  persistFs = path: {
    device = "/persist${path}";
    neededForBoot = true;
    fsType = "none";
    options = [ "bind" ];
  };
  btrSubvolFs = subvol: {
    device = "/dev/disk/by-uuid/${uuid}";
    fsType = "btrfs";
    options = [ "subvol=${subvol}" ];
  };
  persistBind = baseDir: path: {
    name = "${if baseDir=="/" then "" else baseDir}${path}";
    value = persistFs path;
  };
in
{
  imports =
    [
      (modulesPath + "/installer/scan/not-detected.nix")
    ];

  boot.initrd.availableKernelModules = [ "xhci_pci" "ahci" "nvme" "usbhid" "usb_storage" "sd_mod" ];
  boot.initrd.kernelModules = [ ];
  boot.kernelModules = [ "kvm-intel" ];
  boot.extraModulePackages = [ ];
  boot.supportedFilesystems = [ "ntfs" ];
  boot.kernelPackages = pkgs.linuxKernel.packages.linux_6_16;

  fileSystems = {
    "/boot" =
      {
        device = "/dev/disk/by-uuid/A57D-C07F";
        fsType = "vfat";
        options = [ "fmask=0022" "dmask=0022" ];
      };

    "/" = btrSubvolFs "@root";
    "/nix" = btrSubvolFs "@nix";
    "/home" = btrSubvolFs "@home" // { neededForBoot = true; }; # For ~/.age-key.txt to make sops-nix set password
    "/persist" = (btrSubvolFs "@persist") // { neededForBoot = true; };
    # "/gaming" = {
    #   device = "/dev/nvme0n1p5";
    #   fsType = "ntfs";
    #   options = [ "rw" "uid=1000" "gid=100" "user" "exec" "umask=000" ];
    # };
  } // builtins.listToAttrs [
    (persistBind "/" "/var/log")
    (persistBind "/" "/etc/nixos")
    (persistBind "/etc/ssh" "/ssh")
    # (persistBind "/etc" "/ssh/ssh_host_ed25519_key")
    # (persistBind "/etc" "/ssh/ssh_host_ed25519_key.pub")
    # (persistBind "/etc" "/ssh/ssh_host_rsa_key")
    # (persistBind "/etc" "/ssh/ssh_host_rsa_key.pub")
  ];

  swapDevices =
    [{ device = "/dev/disk/by-uuid/cfebcefc-f250-4b15-ba48-eecdb3ef6d86"; }];

  boot.initrd.postDeviceCommands = lib.mkAfter ''
    mkdir /btrfs_tmp
    mount /dev/disk/by-uuid/22edbf0b-9105-4fb5-a378-905825f76f72 /btrfs_tmp
    if [[ -e /btrfs_tmp/@root ]]; then
        mkdir -p /btrfs_tmp/old_roots
        timestamp=$(date --date="@$(stat -c %Y /btrfs_tmp/@root)" "+%Y-%m-%-d_%H:%M:%S")
        mv /btrfs_tmp/@root "/btrfs_tmp/old_roots/$timestamp"
        btrfs subvolume delete /btrfs_tmp/@root
    fi

    delete_subvolume_recursively() {
        IFS=$'\n'
        for i in $(btrfs subvolume list -o "$1" | cut -f 9- -d ' '); do
            delete_subvolume_recursively "/btrfs_tmp/$i"
        done
        btrfs subvolume delete "$1"
    }

    for i in $(find /btrfs_tmp/old_roots/ -maxdepth 1 -mtime +30); do
        delete_subvolume_recursively "$i"
    done

    btrfs subvolume create /btrfs_tmp/@root
    umount /btrfs_tmp
  '';

  # Enables DHCP on each ethernet and wireless interface. In case of scripted networking
  # (the default) this is the recommended approach. When using systemd-networkd it's
  # still possible to use this option, but it's recommended to use it in conjunction
  # with explicit per-interface declarations with `networking.interfaces.<interface>.useDHCP`.
  networking.useDHCP = lib.mkDefault true;
  # networking.interfaces.eno2.useDHCP = lib.mkDefault true;
  # networking.interfaces.wlo1.useDHCP = lib.mkDefault true;

  nixpkgs.hostPlatform = lib.mkDefault "x86_64-linux";
  hardware.cpu.intel.updateMicrocode = lib.mkDefault config.hardware.enableRedistributableFirmware;
}
